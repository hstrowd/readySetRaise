<div class="fundraiser-form">
  <%= form_for(@fundraiser) do |f| %>

    <%= render(partial: "shared/form_field", 
               locals: { 
                 form: f, 
                 model: @fundraiser, 
                 attr: :title
               }) %>
    <% content_for 'description_field' do %>
      <%= f.text_area :description %>
    <% end %>
    <%= render(partial: "shared/form_field", 
               locals: { 
                 form: f, 
                 model: @fundraiser, 
                 attr: :description
               }) %>
    <% content_for 'pledge_start_time_field' do %>
       <% if !@fundraiser.errors[:pledge_start_time].empty? %>
         <div class="field_with_errors">
       <% end %>
       <%= text_field_tag :pledge_start_date %>
       at
       <%= select_tag :pledge_start_time, options_for_select(thirty_minute_internvals) %>
       <% if !@fundraiser.errors[:pledge_start_time].empty? %>
         </div>
       <% end %>
    <% end %>
    <%= render(partial: "shared/form_field", 
               locals: { 
                 form: f, 
                 model: @fundraiser, 
                 field_label: 'Pledge starts on',
                 attr: :pledge_start_time
               }) %>
    <% content_for 'pledge_end_time_field' do %>
       <% if !@fundraiser.errors[:pledge_end_time].empty? %>
         <div class="field_with_errors">
       <% end %>
       <%= text_field_tag :pledge_end_date %>
       at
       <%= select_tag :pledge_end_time, options_for_select(thirty_minute_internvals) %>
       <% if !@fundraiser.errors[:pledge_end_time].empty? %>
         </div>
       <% end %>
    <% end %>
    <%= render(partial: "shared/form_field", 
               locals: { 
                 form: f, 
                 model: @fundraiser,
                 field_label: 'Pledge ends on',
                 attr: :pledge_end_time
               }) %>

    <div class="actions">
      <%= f.submit "Schedule Fundraiser", class: :submit %>
    </div>

    <script>
      (function( $ ) {
        $.widget( "custom.combobox", {
          _create: function() {
            this.wrapper = $( "<span>" )
              .addClass( "custom-combobox" )
              .insertAfter( this.element );
     
            this.element.hide();
            this._createAutocomplete();
            this._createShowAllButton();
          },
     
          _createAutocomplete: function() {
            var selected = this.element.children( ":selected" ),
              value = selected.val() ? selected.text() : "";
     
            this.input = $( "<input>" )
              .appendTo( this.wrapper )
              .val( value )
              .attr( "title", "" )
              .addClass( "custom-combobox-input ui-widget ui-widget-content ui-corner-left" )
              .autocomplete({
                delay: 0,
                minLength: 0,
                source: $.proxy( this, "_source" )
              })
              .tooltip({
                tooltipClass: "ui-state-highlight"
              });
     
            this._on( this.input, {
              autocompleteselect: function( event, ui ) {
                ui.item.option.selected = true;
                this._trigger( "select", event, {
                  item: ui.item.option
                });
              },
     
              autocompletechange: "_reformatToTime"
            });
          },
     
          _createShowAllButton: function() {
            var input = this.input,
              wasOpen = false;
     
            $( "<a>" )
              .attr( "tabIndex", -1 )
              .attr( "title", "Show All Items" )
              .tooltip()
              .appendTo( this.wrapper )
              .button({
                icons: {
                  primary: "ui-icon-triangle-1-s"
                },
                text: false
              })
              .removeClass( "ui-corner-all" )
              .addClass( "custom-combobox-toggle ui-corner-right" )
              .mousedown(function() {
                wasOpen = input.autocomplete( "widget" ).is( ":visible" );
              })
              .click(function() {
                input.focus();
     
                // Close if already visible
                if ( wasOpen ) {
                  return;
                }
     
                // Pass empty string as value to search for, displaying all results
                input.autocomplete( "search", "" );
              });
          },
     
          _source: function( request, response ) {
            var matcher = new RegExp( $.ui.autocomplete.escapeRegex(request.term), "i" );
            response( this.element.children( "option" ).map(function() {
              var text = $( this ).text();
              if ( this.value && ( !request.term || matcher.test(text) ) )
                return {
                  label: text,
                  value: text,
                  option: this
                };
            }) );
          },
     
          _reformatToTime: function( event, ui ) {
              // TODO: Inspect the value and if it's not a valid time update it to match our expected format.

//            // Selected an item, nothing to do
//            if ( ui.item ) {
//              return;
//            }
//     
//            // Search for a match (case-insensitive)
//            var value = this.input.val(),
//              valueLowerCase = value.toLowerCase(),
//              valid = false;
//            this.element.children( "option" ).each(function() {
//              if ( $( this ).text().toLowerCase() === valueLowerCase ) {
//                this.selected = valid = true;
//                return false;
//              }
//            });
//     
//            // Found a match, nothing to do
//            if ( valid ) {
//              return;
//            }
//     
//            // Remove invalid value
//            this.input
//              .val( "" )
//              .attr( "title", value + " didn't match any item" )
//              .tooltip( "open" );
//            this.element.val( "" );
//            this._delay(function() {
//              this.input.tooltip( "close" ).attr( "title", "" );
//            }, 2500 );
//            this.input.autocomplete( "instance" ).term = "";
          },
     
          _destroy: function() {
            this.wrapper.remove();
            this.element.show();
          }
        });
      })( jQuery );
 
      $(function() {
        $.datepicker.setDefaults({
          showAnim: "slideDown"
        });
        $( "#pledge_start_date" ).datepicker();
        $( "#pledge_end_date" ).datepicker();

        $( "#pledge_start_time" ).combobox();
        $( "#pledge_end_time" ).combobox();
      });
    </script>

  <% end %>
</div>
